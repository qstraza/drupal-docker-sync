#!/bin/bash

SSH_DEV_ALIAS='addev'
DOCKER_DRUSH='sudo docker-compose exec -T --user 82 php drush'
DRUPAL_SITE_NAME='default'
LOCAL_DRUPAL_SITE='docroot/sites/default/'
DB_DUMP_PATH='docker-runtime/mariadb-init'
DB_PATH='docker-runtime/mariadb'
DOCKER_GROUP_NAME='docker'
DOCKER_COMPOSE_FILE_NAME='docker-compose.yml'
DOCKER_DB_CONTAINER='db'

if [ ! -f "$DOCKER_COMPOSE_FILE_NAME" ]; then
  echo "Where is your $DOCKER_COMPOSE_FILE_NAME file?"
  exit 1
fi

# Parsed variables from yaml file.
REMOTE_DRUPAL_PATH=$(grep REMOTE_DRUPAL_PATH docker-compose.yml | cut -d : -f 2 | cut -d " " -f 2)
REMOTE_IS_DOCKER=$(grep REMOTE_IS_DOCKER docker-compose.yml | cut -d : -f 2 | cut -d " " -f 2)
DRUPAL_VERSION=$(grep DRUPAL_VERSION docker-compose.yml | cut -d : -f 2 | cut -d " " -f 2)

function db_sync {
  if [ -d "$DB_DUMP_PATH" ]; then
    rm -rf $DB_DUMP_PATH/*
  else
    mkdir -p "$DB_DUMP_PATH"
  fi

  if [ $REMOTE_IS_DOCKER -eq 0 ]; then
    ssh $SSH_DEV_ALIAS "cd $REMOTE_DRUPAL_PATH && drush sql-dump --gzip" | gunzip > $DB_DUMP_PATH/sqldump.sql
  else
    ssh $SSH_DEV_ALIAS "cd /projects/$REMOTE_DRUPAL_PATH && $DOCKER_DRUSH sql-dump --gzip" | gunzip > $DB_DUMP_PATH/sqldump.sql
  fi

  # Check if connection was successful.
  if [ $? -eq 1 ]; then
    exit
  fi

  # If we are on Linux, non-root cannot remove docker-runtime/mariadb folder (ownership issue),
  # so we remove this folder within container.
  if [ os_check == "linux" ]; then
    # Prepend 'sudo' if we are running on Linux and current user is not part of docker group.
    if [ ! "$(id -Gn | grep $DOCKER_GROUP_NAME)" ]; then
      sudo docker-compose kill $DOCKER_DB_CONTAINER
      sudo docker-compose rm -f $DOCKER_DB_CONTAINER
      sudo rm -rf $DB_PATH
      sudo docker-compose up -d $DOCKER_DB_CONTAINER
    else
      docker-compose kill $DOCKER_DB_CONTAINER
      docker-compose rm -f $DOCKER_DB_CONTAINER
      docker-compose up -d $DOCKER_DB_CONTAINER
      docker-compose run --rm $DOCKER_DB_CONTAINER rm -rf /var/lib/mysql
    fi
  else
    docker-compose kill $DOCKER_DB_CONTAINER
    docker-compose rm -f $DOCKER_DB_CONTAINER
    rm -rf $DB_PATH
    docker-compose up -d $DOCKER_DB_CONTAINER
  fi

  echo ""
  echo "####################################################################################################"
  echo "# Database has been transferred and is now importing. It may take a while for page to start working."
  echo "# You may watch logs of DB container by executing:"
  echo -e "# \tdocker-compose logs -f $DOCKER_DB_CONTAINER"
  echo "####################################################################################################"
}

function files_sync_rsync {
  # Using rsync
  if [ $REMOTE_IS_DOCKER -eq 0 ]; then
    rsync -avz --delete $SSH_DEV_ALIAS:$REMOTE_DRUPAL_PATH/sites/$DRUPAL_SITE_NAME/files $LOCAL_DRUPAL_SITE
  else
    rsync -avz --delete $SSH_DEV_ALIAS:/projects/$REMOTE_DRUPAL_PATH/docroot/sites/$DRUPAL_SITE_NAME/files $LOCAL_DRUPAL_SITE
  fi
  fix_permission
}

function files_sync_scp {
  # Using scp
  rm -rf $LOCAL_DRUPAL_SITE/files
  scp -r $SSH_DEV_ALIAS:$REMOTE_DRUPAL_PATH/sites/$DRUPAL_SITE_NAME/files $LOCAL_DRUPAL_SITE
  fix_permission
}

function files_sync_tar {
  # Using tar
  rm -rf $LOCAL_DRUPAL_SITE/files
  ssh addev "cd $REMOTE_DRUPAL_PATH/sites/$DRUPAL_SITE_NAME/ && tar -zcvO files" | tar -zxvf - -C $LOCAL_DRUPAL_SITE
  fix_permission
}

function fix_permission {
  # We need to fix permissions to files if we are on Linux.
  # We also need to change the approach of changing the ownership if
  # current user is not part of docker group.
  if [ os_check == "linux" ] && [ -d "$LOCAL_DRUPAL_SITE/files" ]; then
    if [ ! "$(id -Gn | grep $DOCKER_GROUP_NAME)" ]; then
      sudo chgrp -R 82 $LOCAL_DRUPAL_SITE/files
      sudo chmod -R 775 $LOCAL_DRUPAL_SITE/files
    else
      docker-compose run --rm php chgrp -R 82 sites/$DRUPAL_SITE_NAME/files
      docker-compose run --rm php chmod -R 775 sites/$DRUPAL_SITE_NAME/files
    fi
  fi
}

function os_check {
  case $( uname -s ) in
    Linux) echo linux;;
    Darwin) echo mac;;
    *)     echo other;;
  esac
}

while getopts ":spla:" opt; do
  case "$opt" in
    s)
      DRUPAL_SITE_NAME=$OPTARG
      ;;
    p)
      REMOTE_DRUPAL_PATH=$OPTARG
      ;;
    l)
      LOCAL_DRUPAL_SITE=$OPTARG
      ;;
    a)
      SSH_DEV_ALIAS=$OPTARG
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      echo "usage: $0 [-s | -p | -l | -a] db-sync | rsync | scp | tar"
      echo "Options:"
      echo -e "\t-s \tName of drupal site on remote server. By default it is set to $DRUPAL_SITE_NAME"
      echo -e "\t-p \tSet path to drupal files on remote server. This is by default parsed from docker-compose.yml file"
      echo -e "\t-l \tSet path to drupal files on your localhost system. This is by default set to $LOCAL_DRUPAL_SITE"
      echo -e "\t-a \tSet SSH alias for accessing remote server. Defaults to $SSH_DEV_ALIAS"
      echo ""
      echo -e "\tdb-sync \tSynchronizes database from remote server to your local Docker environment"
      echo -e "\trsync \t\tSynchronizes files (folder sites/$DRUPAL_SITE_NAME/files) from remote server to your local Docker environment. It uses rsync. Recommended way."
      echo -e "\tscp \t\tSynchronizes files (folder sites/$DRUPAL_SITE_NAME/files) from remote server to your local Docker environment. It uses scp to copy files over."
      echo -e "\ttar \t\tSynchronizes files (folder sites/$DRUPAL_SITE_NAME/files) from remote server to your local Docker environment. It uses tar to copy files over."
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

for arg in "$@"
do
  case $arg in
  'db-sync')
    db_sync
    ;;
  'rsync')
    files_sync_rsync
    ;;
  'scp')
    files_sync_scp
    ;;
  'tar')
    files_sync_tar
    ;;
  esac
done
